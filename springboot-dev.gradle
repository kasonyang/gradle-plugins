bootRun {
  addResources = true
}
def config = System.getProperty("app.config");
if(config){
    task("generatePropertyFile") << {
      def propertiesFile = new File(projectDir,"src/main/resources/application.properties");
      def props = new Properties();
      if(propertiesFile.exists()){
        props.load(new FileInputStream(propertiesFile));
      }
      File prodPropertiesFile = new File(projectDir,"src/main/resources/application.${config}.properties");
      def propertiesOutFile = new File(projectDir,"build/resources/main/application.properties");
      if(prodPropertiesFile.exists()){
        println("using config file:" + prodPropertiesFile.absolutePath);
        def prodProps = new Properties();
        prodProps.load(new FileInputStream(prodPropertiesFile));
        def names = prodProps.propertyNames();
        for(n in names){
          props.setProperty(n,prodProps.getProperty(n));
        }
      }
      props.setProperty("spring.devtools.restart.additional-paths","build");
      props.setProperty("spring.devtools.restart.trigger-file",".springboot-dev-trigger");
      props.save(
          new FileOutputStream(propertiesOutFile)
            ,"using ${config} file"
      );
    }
    war.dependsOn generatePropertyFile
    generatePropertyFile.dependsOn processResources
}

task("updateRestartTrigger")<<{
    def triggerDir = new File("$projectDir","build");
    if(!triggerDir.exists()){
        triggerDir.mkdirs();
    }
    def triggerFile = new File(triggerDir,".springboot-dev-trigger");
    def fos = new FileOutputStream(triggerFile);
    fos.write("done.".getBytes());
    fos.close();
}

updateRestartTrigger.dependsOn check
build.dependsOn updateRestartTrigger